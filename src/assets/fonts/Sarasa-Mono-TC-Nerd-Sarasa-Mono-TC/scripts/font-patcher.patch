diff --git a/font-patcher b/font-patcher
index dbecf605..244960d7 100755
--- a/font-patcher
+++ b/font-patcher
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python3
 # coding=utf8
 # Nerd Fonts Version: 2.1.0
 # script version: 3.0.1
@@ -6,7 +6,7 @@
 from __future__ import absolute_import, print_function, unicode_literals
 
 version = "2.1.0"
-projectName = "Nerd Fonts"
+projectName = "Nerds"
 projectNameAbbreviation = "NF"
 projectNameSingular = projectName[:-1]
 
@@ -66,6 +66,9 @@ class font_patcher:
         else:
             self.extension = '.' + self.args.extension
 
+        segs = os.path.basename(self.args.font).replace(self.extension, "").split("-")
+        segs = segs[:-1] + ["nerd"] + segs[-1:]
+        self.output_file_name = "-".join(segs)
 
     def patch(self):
         if self.args.single:
@@ -106,14 +109,14 @@ class font_patcher:
 
         # the `PfEd-comments` flag is required for Fontforge to save '.comment' and '.fontlog'.
         if self.sourceFont.fullname != None:
-            self.sourceFont.generate(self.args.outputdir + "/" + self.sourceFont.fullname + self.extension, flags=(str('opentype'), str('PfEd-comments')))
+            self.sourceFont.generate(self.args.outputdir + "/" + self.output_file_name + self.extension, flags=(str('opentype'), str('PfEd-comments')))
             print("\nGenerated: {}".format(self.sourceFont.fontname))
         else:
-            self.sourceFont.generate(self.args.outputdir + "/" + self.sourceFont.cidfontname + self.extension, flags=(str('opentype'), str('PfEd-comments')))
+            self.sourceFont.generate(self.args.outputdir + "/" + self.output_file_name + self.extension, flags=(str('opentype'), str('PfEd-comments')))
             print("\nGenerated: {}".format(self.sourceFont.fullname))
 
         if self.args.postprocess:
-            subprocess.call([self.args.postprocess, self.args.outputdir + "/" + self.sourceFont.fullname + self.extension])
+            subprocess.call([self.args.postprocess, self.args.outputdir + "/" + self.output_file_name + self.extension])
             print("\nPost Processed: {}".format(self.sourceFont.fullname))
 
 
@@ -221,32 +224,7 @@ class font_patcher:
         else:
             additionalFontNameSuffix = verboseAdditionalFontNameSuffix
         if not self.args.complete:
-            # NOTE not all symbol fonts have appended their suffix here
-            if self.args.fontawesome:
-                additionalFontNameSuffix += " A"
-                verboseAdditionalFontNameSuffix += " Plus Font Awesome"
-            if self.args.fontawesomeextension:
-                additionalFontNameSuffix += " AE"
-                verboseAdditionalFontNameSuffix += " Plus Font Awesome Extension"
-            if self.args.octicons:
-                additionalFontNameSuffix += " O"
-                verboseAdditionalFontNameSuffix += " Plus Octicons"
-            if self.args.powersymbols:
-                additionalFontNameSuffix += " PS"
-                verboseAdditionalFontNameSuffix += " Plus Power Symbols"
-            if self.args.pomicons:
-                additionalFontNameSuffix += " P"
-                verboseAdditionalFontNameSuffix += " Plus Pomicons"
-            if self.args.fontlinux:
-                additionalFontNameSuffix += " L"
-                verboseAdditionalFontNameSuffix += " Plus Font Logos (Font Linux)"
-            if self.args.material:
-                additionalFontNameSuffix += " MDI"
-                verboseAdditionalFontNameSuffix += " Plus Material Design Icons"
-            if self.args.weather:
-                additionalFontNameSuffix += " WEA"
-                verboseAdditionalFontNameSuffix += " Plus Weather Icons"
-
+            pass
         # if all source glyphs included simplify the name
         else:
             additionalFontNameSuffix = " " + projectNameSingular + " Complete"
@@ -374,14 +352,60 @@ class font_patcher:
         fontname   = replace_font_name(fontname,   additionalFontNameReplacements2)
 
         # replace any extra whitespace characters:
-        self.sourceFont.familyname = " ".join(familyname.split())
+        self.sourceFont.familyname = "Sarasa Mono TC Nerd"
         self.sourceFont.fullname   = " ".join(fullname.split())
-        self.sourceFont.fontname   = " ".join(fontname.split())
+        style = self.sourceFont.fullname.split()[3:-1]
+        style = ["regular"] if len(style) == 0 else style
+        fontname = self.sourceFont.familyname.replace(" ", "") + "-" + "".join(style)
+        self.sourceFont.fontname   = fontname
+        self.sourceFont.fullname = self.sourceFont.familyname + " " + "".join(style)
+
+        print(self.sourceFont.familyname)
+        print(self.sourceFont.fullname)
+        print(self.sourceFont.fontname)
+
+        self.sourceFont.appendSFNTName(
+            str("English (US)"), str("Preferred Family"), self.sourceFont.familyname
+        )
+        self.sourceFont.appendSFNTName(
+            str("English (US)"), str("Family"), self.sourceFont.familyname
+        )
+        self.sourceFont.appendSFNTName(
+            str("English (US)"), str("Compatible Full"), self.sourceFont.fullname
+        )
+        self.sourceFont.appendSFNTName(str("English (US)"), str("SubFamily"), subFamily)
+        self.sourceFont.appendSFNTName(
+            str("English (US)"), str("UniqueID"), self.sourceFont.fullname
+        )
 
-        self.sourceFont.appendSFNTName(str('English (US)'), str('Preferred Family'), self.sourceFont.familyname)
-        self.sourceFont.appendSFNTName(str('English (US)'), str('Family'), self.sourceFont.familyname)
-        self.sourceFont.appendSFNTName(str('English (US)'), str('Compatible Full'), self.sourceFont.fullname)
-        self.sourceFont.appendSFNTName(str('English (US)'), str('SubFamily'), subFamily)
+        self.sourceFont.appendSFNTName(
+            str("Chinese (Taiwan)"),
+            str("Preferred Family"),
+            self.sourceFont.familyname.replace("Sarasa", "更紗黑體"),
+        )
+        self.sourceFont.appendSFNTName(
+            str("Chinese (Taiwan)"),
+            str("Family"),
+            self.sourceFont.familyname.replace("Sarasa", "更紗黑體"),
+        )
+        self.sourceFont.appendSFNTName(
+            str("Chinese (Taiwan)"),
+            str("Fullname"),
+            self.sourceFont.fullname.replace("Sarasa", "更紗黑體"),
+        )
+        self.sourceFont.appendSFNTName(
+            str("Chinese (Taiwan)"),
+            str("Compatible Full"),
+            self.sourceFont.fullname.replace("Sarasa", "更紗黑體"),
+        )
+        self.sourceFont.appendSFNTName(
+            str("Chinese (Taiwan)"), str("SubFamily"), subFamily
+        )
+        self.sourceFont.appendSFNTName(
+            str("Chinese (Taiwan)"),
+            str("UniqueID"),
+            self.sourceFont.fullname.replace("Sarasa", "更紗黑體"),
+        )
         self.sourceFont.comment = projectInfo
         self.sourceFont.fontlog = projectInfo
 
@@ -714,16 +738,17 @@ class font_patcher:
                     if scale_factor and use_scale_glyph(sym_glyph.unicode, scaleGlyph['GlyphsToScale']):
                         # We want to preserve the relative size of each glyph to other glyphs
                         # in the same symbol font.
-                        scale_ratio_x = scale_factor
-                        scale_ratio_y = scale_factor
+                        scale_ratio_x = self.font_dim['width'] / sym_dim['width']
+                        scale_ratio_y = self.font_dim['height'] / sym_dim['height']
                     else:
                         # In this case, each glyph is sized independently to each other
-                        scale_ratio_x = self.get_scale_factor(sym_dim)
-                        scale_ratio_y = scale_ratio_x
+                        scale_ratio_x = self.font_dim['width'] / sym_dim['width']
+                        scale_ratio_y = self.font_dim['height'] / sym_dim['height']
                 else:
                     if 'x' in sym_attr['stretch']:
                         # Stretch the glyph horizontally to fit the entire available width
                         scale_ratio_x = self.font_dim['width'] / sym_dim['width']
+                        scale_ratio_y = self.font_dim['height'] / sym_dim['height']
             # end if single width
 
             # non-monospace (double width glyphs)
@@ -734,6 +759,7 @@ class font_patcher:
             if 'y' in sym_attr['stretch']:
                 # Stretch the glyph vertically to total line height (good for powerline separators)
                 # Currently stretching vertically for both monospace and double-width
+                scale_ratio_x = self.font_dim['width'] / sym_dim['width']
                 scale_ratio_y = self.font_dim['height'] / sym_dim['height']
 
             if scale_ratio_x != 1 or scale_ratio_y != 1:
